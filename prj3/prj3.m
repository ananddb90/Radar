%% Kelvin Lin Radar project 3
clc;clear all;close all;

%% a

% for BPSK, we take the data generated by randgmix for a mean of +-1, and
% compare it to a threshold. The total fraction of data points above the
% threshold will yield the probability of detection. Repeating this process
% for the data generated by randgmix for a mean of 0 will yield the
% probability of false alarm.

%% BPSK

% generate inputs to randgmix
SNR = 14.6;
a = [0.5 0.5];                      %weight
m = [-1 1];                         %signalling scheme
s2 = repmat(10^-(SNR/10),size(a));  %variance
n = 1e5;                            %number of samples

% generate 2 hypotheses
h1 = randgmix(a,m,s2,n);
h0 = randgmix(1,0,s2(1),n);

% plot histogram of generated rcvr values
figure
hist(h1,1000);

% calculate Pfa and Pd
T = 0:0.001:max(abs(h1));
Pfa = arrayfun(@(T) sum(abs(h0)>T)/n,T);
Pd = arrayfun(@(T) sum(abs(h1)>T)/n,T);

% plot Pfa and Pd
figure
plot(Pfa,Pd);
title('Pfa vs Pd');
xlabel('Pfa');
ylabel('Pd')
figure
plot(T,Pfa);
xlabel('threshold')
ylabel('Pfa')
title('Pfa vs Threshold')
figure
plot(T,Pd)
title('Pd vs Threshold')
xlabel('Threshold')
ylabel('Pd')

% As the SNR increases, the Pfa drops more quickly with an increased
% threshold. For a smaller Pfa, you also achieve a higher Pd. This is to be
% expected, as detection errors should be decreasing with increasing SNR.
% In the Pd vs Pfa graph, we see that as we increase SNR, the graph
% steepens until it becomes a unit step function at a threshold of zero.
% Empirically, this phenomenon occurs at approximately SNR = 14.5dB

%% 16 qam Radial Threshold from origin

% generate inputs to randgmix
SNR = 6.3;                                   
real = -3:2:3;                              %generate QAM signals
im = i*real;
[real im] = meshgrid(real,im);
m = reshape(real + im,[],1);
a = 1/numel(m)*ones(size(m));               %generate weights
s2 = repmat(0.5*10^-(SNR/10),size(a));      %generate variance
n = 1e5;                                    %number of samples

% generate hypotheses
H1 = randgmix(a,m,s2,n);
H0 = randgmix(1,0,s2(1),n);

% plot H1 hypothesis histogram
figure
hist(abs(H1),1000);

% calculate Pfa and Pd
T = 0:0.001:max(abs(H1));
Pfa = arrayfun(@(T) sum(abs(H0)>T)/n,T);
Pd = arrayfun(@(T) sum(abs(H1)>T)/n,T);

% plot Pfa and Pd
figure
plot(Pfa,Pd);
title('Pfa vs Pd');
xlabel('Pfa');
ylabel('Pd')
figure
plot(T,Pfa);
title('Pfa vs Threshold')
figure
plot(T,Pd)
title('Pd vs Threshold')
xlabel('Threshold')
ylabel('Pd')

% In 16 QAM, the same phenomenon of occurs in the Pd vs Pfa graph. However,
% the increase in steepness of the pd graph occurs much faster with
% increase in SNR. This result is consistent with the signalling scheme,
% as 16 QAM requires much more power to transmit.

%% 16 qam Version 2 euclidian distance
%WARNING: LONG RUNTIME

% generate inputs to randgmix
SNR = 0;                                   
real = -3:2:3;                              %generate QAM signals
im = i*real;
[real im] = meshgrid(real,im);
m = reshape(real + im,[],1);
a = 1/numel(m)*ones(size(m));               %generate weights
s2 = repmat(0.5*10^-(SNR/10),size(a));      %generate variance
n = 1e5;                                    %number of samples

% generate hypotheses
H1 = randgmix(a,m,s2,n);
H0 = randgmix(1,0,s2(1),n);

% plot H1 hypothesis histogram
figure
hist(abs(H1),1000);

% % calculate Pfa and Pd
% T = 0:0.001:5;
% Pfa = arrayfun(@(T) sum(abs(H0)>T)/n,T);
% Pd = arrayfun(@(T) sum(abs(H1)>T)/n,T);

% calculate Pfa and Pd
s = 0.2;
T = s:s:max(abs(H1));
Pd = zeros(1,numel(T));
Pfa = zeros(1,numel(T));
parfor ii = 1:numel(T);
    TT = T(ii);
   dist0 = abs(H1);
   dist1 = arrayfun(@(h) min(abs(h - m')),H1,'UniformOutput',false);
   dist1 = cell2mat(dist1);
   dist1 = reshape(dist1,numel(dist1),1);
%    Pd(ii) = sum((dist0-dist1) > TT)/(numel(dist0));
   Pd(ii) = sum(dist0-dist1<TT)/(numel(dist0));
   dist0 = abs(H0);
   dist1 = arrayfun(@(h) min(abs(h - m')),H0,'UniformOutput',false);
   dist1 = cell2mat(dist1);
   dist1 = reshape(dist1,numel(dist1),1);
%    Pfa(ii) = sum((dist0-dist1) > log(TT))/(numel(dist0));
   Pfa(ii) = sum(dist0-dist1 <TT)/(numel(dist0));
end

% plot Pfa and Pd
figure
plot(Pfa,Pd);
title('Pfa vs Pd');
xlabel('Pfa');
ylabel('Pd')
figure
plot(T,Pfa);
title('Pfa vs Threshold')
figure
plot(T,Pd)
title('Pd vs Threshold')
xlabel('Threshold')
ylabel('Pd')

% Using minimum euclidian distance as a measure of the threshold, we see
% that this results in a Pd which increases with increasing threshold as
% opposed to decreasing. This is due to the fact that now, we are checking
% if a point lies below the threshold as opposed to above. Pfa vs PD
% behaves similarly to radial threshold from the origin and BPSK